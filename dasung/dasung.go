package dasung

import (
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/tarm/serial"
)

type Mode string

const (
	MODE_AUTO  Mode = "auto"
	MODE_TEXT  Mode = "text"
	MODE_IMAGE Mode = "image"
	MODE_VIDEO Mode = "video"
)

type DasungControl struct {
	s                           *serial.Port
	mu                          sync.Mutex
	stopChan                    chan struct{} // Channel to signal stop monitoring
	currentMode                 Mode
	currentBrightness           int
	lastSerialDataReceived_mode int64
}

// NewDasungControl opens the serial port.
func NewDasungControl(device string) (*DasungControl, error) {
	c := &serial.Config{Name: device, Baud: 115200, ReadTimeout: time.Second * 2}
	s, err := serial.OpenPort(c)
	if err != nil {
		return nil, err
	}

	return &DasungControl{
		s:                 s,
		mu:                sync.Mutex{},
		stopChan:          make(chan struct{}),
		currentMode:       MODE_AUTO,
		currentBrightness: 0,
	}, nil
}

// StartMonitoring starts a goroutine to continuously monitor serial port messages
func (d *DasungControl) startMonitoring(callback func([]byte)) {
	go func() {
		buf := make([]byte, 1024)
		for {
			select {
			case <-d.stopChan:
				return
			default:
				n, err := d.s.Read(buf)
				if err != nil {
					// if err.Error() != "read timeout" {
					// 	fmt.Printf("Error reading from serial port: %v\n", err)
					// }
					continue
				}
				if n > 0 {
					callback(buf[:n])
				}
			}
		}
	}()
}

type CtrType string

const (
	CtrType_SetBrightness CtrType = "set_brightness"
	CtrType_SetMode       CtrType = "set_mode"
)

// StartMonitoring starts a goroutine to continuously monitor serial port messages
func (d *DasungControl) StartMonitoring(callback func(ctrType CtrType, brightness int, mode Mode)) {
	d.startMonitoring(func(data []byte) {
		if len(data) != 24 {
			return
		}
		if data[6] != 48 {
			return
		}
		now := time.Now().UnixMilli()
		if data[5] == 49 {
			// set brightness
			if now-d.lastSerialDataReceived_mode < 200 {
				return
			}
			b := int(data[7] - 48)
			d.currentBrightness = b
			callback(CtrType_SetBrightness, b, d.currentMode)
		} else if data[5] == 50 {
			// set mode
			m := MODE_AUTO
			switch data[7] {
			case 50:
				m = MODE_TEXT
			case 51:
				m = MODE_IMAGE
			case 52:
				m = MODE_VIDEO
			case 53:
				m = MODE_AUTO
			default:
				log.Fatalf("invalid mode: %d", data[7])
			}
			d.lastSerialDataReceived_mode = now
			d.currentMode = m
			callback(CtrType_SetMode, d.currentBrightness, m)
		}
	})
}

// StopMonitoring stops the monitoring goroutine
func (d *DasungControl) StopMonitoring() {
	close(d.stopChan)
}

func (d *DasungControl) Write(command []byte) {
	d.mu.Lock()
	defer d.mu.Unlock()
	_, err := d.s.Write(command)
	if err != nil {
		fmt.Printf("Error writing to serial port: %v\n", err)
	}
}

func (d *DasungControl) ClearScreen() {
	command := []byte{0x1b, 0x0, 0x10, 0x40, 0x97, 0xc9, 0x6, 0xc7, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x2, 0x0, 0x6, 0x0, 0x2, 0x3, 0x18, 0x0, 0x0, 0x0, 0x35, 0x46, 0x46, 0x35, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x41, 0x30, 0x46, 0x41}
	d.Write(command)
}

func (d *DasungControl) SetBrightness(brightness int) {
	var command []byte
	//───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
	//                                                                                                                                                                                                              │
	//                                                                                                                                                                                                              ▼ (index:34)
	if brightness == 1 {
		command = []byte{0x1b, 0x0, 0x10, 0x60, 0xc6, 0xca, 0x6, 0xc7, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x2, 0x0, 0xa, 0x0, 0x2, 0x3, 0x18, 0x0, 0x0, 0x0, 0x35, 0x46, 0x46, 0x35, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x41, 0x30, 0x46, 0x41}
	} else if brightness == 2 {
		command = []byte{0x1b, 0x0, 0x10, 0x30, 0x7f, 0xca, 0x6, 0xc7, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x2, 0x0, 0xa, 0x0, 0x2, 0x3, 0x18, 0x0, 0x0, 0x0, 0x35, 0x46, 0x46, 0x35, 0x30, 0x31, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x41, 0x30, 0x46, 0x41}
	} else if brightness == 3 {
		command = []byte{0x1b, 0x0, 0x10, 0xc0, 0x36, 0xca, 0x6, 0xc7, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x2, 0x0, 0xa, 0x0, 0x2, 0x3, 0x18, 0x0, 0x0, 0x0, 0x35, 0x46, 0x46, 0x35, 0x30, 0x31, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x41, 0x30, 0x46, 0x41}
	} else if brightness == 4 {
		command = []byte{0x1b, 0x0, 0x10, 0xa0, 0x86, 0xca, 0x6, 0xc7, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x2, 0x0, 0xa, 0x0, 0x2, 0x3, 0x18, 0x0, 0x0, 0x0, 0x35, 0x46, 0x46, 0x35, 0x30, 0x31, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x41, 0x30, 0x46, 0x41}
	} else if brightness == 5 {
		command = []byte{0x1b, 0x0, 0x10, 0xb0, 0x3c, 0xcb, 0x6, 0xc7, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x2, 0x0, 0xa, 0x0, 0x2, 0x3, 0x18, 0x0, 0x0, 0x0, 0x35, 0x46, 0x46, 0x35, 0x30, 0x31, 0x30, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x41, 0x30, 0x46, 0x41}
	} else if brightness == 6 {
		command = []byte{0x1b, 0x0, 0x10, 0x20, 0x7b, 0xca, 0x6, 0xc7, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x2, 0x0, 0xa, 0x0, 0x2, 0x3, 0x18, 0x0, 0x0, 0x0, 0x35, 0x46, 0x46, 0x35, 0x30, 0x31, 0x30, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x41, 0x30, 0x46, 0x41}
	} else if brightness == 7 {
		command = []byte{0x1b, 0x0, 0x10, 0x90, 0x36, 0xca, 0x6, 0xc7, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x2, 0x0, 0xa, 0x0, 0x2, 0x3, 0x18, 0x0, 0x0, 0x0, 0x35, 0x46, 0x46, 0x35, 0x30, 0x31, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x41, 0x30, 0x46, 0x41}
	} else if brightness == 8 {
		command = []byte{0x1b, 0x0, 0x10, 0x90, 0x89, 0xca, 0x6, 0xc7, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x2, 0x0, 0xa, 0x0, 0x2, 0x3, 0x18, 0x0, 0x0, 0x0, 0x35, 0x46, 0x46, 0x35, 0x30, 0x31, 0x30, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x41, 0x30, 0x46, 0x41}
	} else if brightness == 9 {
		command = []byte{0x1b, 0x0, 0x10, 0x10, 0x99, 0xca, 0x6, 0xc7, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x2, 0x0, 0xa, 0x0, 0x2, 0x3, 0x18, 0x0, 0x0, 0x0, 0x35, 0x46, 0x46, 0x35, 0x30, 0x31, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x41, 0x30, 0x46, 0x41}
	} else {
		log.Fatalf("invalid brightness: %d", brightness)
	}
	d.Write(command)
	d.currentBrightness = brightness
}

func (d *DasungControl) SetMode(mode Mode) {
	var command []byte
	//───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
	//                                                                                                                                                                                                              │
	//                                                                                                                                                                                                              ▼ (index:34)
	if mode == MODE_TEXT {
		command = []byte{0x1b, 0x0, 0x10, 0xc0, 0xfc, 0xca, 0x6, 0xc7, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x2, 0x0, 0xa, 0x0, 0x2, 0x3, 0x18, 0x0, 0x0, 0x0, 0x35, 0x46, 0x46, 0x35, 0x30, 0x32, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x41, 0x30, 0x46, 0x41}
	} else if mode == MODE_IMAGE {
		command = []byte{0x1b, 0x0, 0x10, 0xb0, 0x5e, 0xca, 0x6, 0xc7, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x2, 0x0, 0xa, 0x0, 0x2, 0x3, 0x18, 0x0, 0x0, 0x0, 0x35, 0x46, 0x46, 0x35, 0x30, 0x32, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x41, 0x30, 0x46, 0x41}
	} else if mode == MODE_VIDEO {
		command = []byte{0x1b, 0x0, 0x10, 0xb0, 0xdd, 0xca, 0x6, 0xc7, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x2, 0x0, 0xa, 0x0, 0x2, 0x3, 0x18, 0x0, 0x0, 0x0, 0x35, 0x46, 0x46, 0x35, 0x30, 0x32, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x41, 0x30, 0x46, 0x41}
	} else if mode == MODE_AUTO {
		command = []byte{0x1b, 0x0, 0x10, 0xb0, 0x4f, 0xca, 0x6, 0xc7, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x2, 0x0, 0xa, 0x0, 0x2, 0x3, 0x18, 0x0, 0x0, 0x0, 0x35, 0x46, 0x46, 0x35, 0x30, 0x32, 0x30, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x41, 0x30, 0x46, 0x41}
	} else {
		log.Fatalf("invalid mode: %s", mode)
	}
	d.Write(command)
	d.currentMode = mode
}
